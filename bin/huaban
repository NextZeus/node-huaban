#!/usr/bin/env node

'use strict'

/**
 * Module dependencies
 */

const co = require('co')
const _ = require('lodash')
const minimist = require('minimist')
const debug = require('debug')('huaban:cli')
const HuabanBoard = require('../lib')
const pkgVersion = require('../package').version

const argv = minimist(process.argv.slice(2), {
  boolean: ['help'],
  alias: {
    h: ['help'],
    c: ['concurrency'],
    t: ['timeout'],
  },
  default: {
    concurrency: 10,
    timeout: 1,
    'max-times': 5,
  },
})

const exampleUrl = 'http://huaban.com/boards/17324249/'
if (process.argv.length === 2 || argv.help) {
  console.log(`
  huaban board downloader v${pkgVersion}

    Usage:
      huaban [options] <board_url>

    Options:
      -h,--help         输出此帮助信息
      -c,--concurrency  同时最大下载数量,默认10
      -t, --timeout     超时, 单位分, 默认1分钟 = 60 * 1000毫秒
      --max-times       重试次数, 默认5

    Example:
      huaban ${exampleUrl} -c 10
  `)
  process.exit()
}

// 并发
const concurrency = argv.concurrency

// timeout in ms
const timeout = argv.timeout * 60 * 1000

// 重试次数
const maxTimes = argv['max-times']

debug('parsed argv: %j', argv)

co(function*() {
  const url = argv._[0]
  const concurrency = argv.concurrency
  const start = Date.now()

  // download
  const board = new HuabanBoard(url)
  yield board.init()

  // title & name
  console.log(`花瓣画板: [${board.title}], 共 ${board.pins.length} 张图片`)
  yield board.downloadBoard(concurrency, timeout, maxTimes)

  // end
  const end = Date.now()
  console.log('耗时 %s 秒', (end - start) / 1000)
}).catch(e => console.error(e.stack || e))
